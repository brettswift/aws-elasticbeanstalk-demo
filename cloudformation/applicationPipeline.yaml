AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This is the only template you should be uploading manually.
  Main application pipeline for the BeanstalkDemo application.
  Uploading this pipeline with required parameters will build your pipeline and entire application.
Parameters:
  PipelineName:
    Description: A name for the pipeline
    Type: String
    Default: BeanstalkDemo
  GithubUser:
    Description: Github account where the source files exist for this Application
    Type: String
  GithubToken:
    Description: Secret. Token used for access to the account specified.
    NoEcho: true
    Type: String
    ConstraintDescription: may be a personal access token.
  Repo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
    Default: aws-elasticbeanstalk-demo
  Branch:
    Type: String
    Description: Branch to use from Repo. Only the Name. not the URL
    Default: master
  #TODO: flesh out test and prod params.
  # TestStackName:
  #   Default: Test-Vpc
  #   Description: A name for the test VPC stack
  #   Type: String
  # TestStackConfig:
  #   Default: templates/infrastructure/test-vpc-configuration.json
  #   Description: The configuration file name for the test vpc stack
  #   Type: String
  #   ConstraintDescription: relative path within the source repository "Repo".
  # ProdStackName:
  #   Default: Prod-Vpc
  #   Description: A name for the production VPC stack
  #   Type: String
  # ProdStackConfig:
  #   Default: templates/infrastructure/prod-vpc-configuration.json
  #   Description: The configuration file name for the production VPC stack
  #   Type: String
  #   ConstraintDescription: relative path within the source repository "Repo".
  # ChangeSetName:
  #   Default: UpdatePreview-BeanstalkDemo
  #   Description: A name for the production changeset.
  #   Type: String
  # Email:
  #   Description: The email address where CodePipeline sends pipeline notifications
  #   Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - PipelineName
          - GithubUser
          - GithubToken
          - Repo
          - Branch
          - Email
      # - Label:
      #     default: "Stack Config File (vpc.yaml)"
      # - Label:
      #     default: "Test Stack Settings"
      #   Parameters:
      #     - TestStackName
      #     - TestStackConfig
      # - Label:
      #     default: "Production Stack Settings"
      #   Parameters:
      #     - ChangeSetName
      #     - ProdStackName
      #     - ProdStackConfig
# Mappings: none yet!
Resources:
  BeanstalkDemo:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample Ruby Sinatra Application
  BeanstalkDemoVersion: #TODO: this must be created from the codepipeline and passed in.
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      Description: AWS Elastic Beanstalk Demo App Version
      ApplicationName:
        Ref: BeanstalkDemo
      SourceBundle:
        S3Bucket:
          Fn::Join: #TODO: inject this from codepipeline?
          - "-"
          - - dev-brettswift-beanstalk-demo
            - Ref: AWS::Region
        S3Key: BeanstalkDemo.zip #TODO: inject this from codepipeline
  BeanstalkDemoConfigurationTemplateNonProd: #create non-prod template as well with thinner resourcing.
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: BeanstalkDemo
      Description: Non Production sized template
      #SolutionStackNames: http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html#concepts.platforms.ruby
      SolutionStackName: 64bit Amazon Linux 2016.09 v2.3.1 running Ruby 2.3 (Puma)
      OptionSettings:
      - OptionName: EnvironmentType
        Namespace: aws:elasticbeanstalk:environment
        Value: SingleInstance
  BeanstalkDemoEnvDev: #create dev/test envs that use the non-prod configuration.
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn:
    - BeanstalkDemo
    - BeanstalkDemoConfigurationTemplateNonProd
    - BeanstalkDemoVersion
    Properties:
      Description: Development demo environment running sample ruby sinatra application.
      EnvironmentName: Development
      ApplicationName:
        Ref: BeanstalkDemo
      Description: AWS ElasticBeanstalk Dev Ruby Environment
      TemplateName:
        Ref: BeanstalkDemoConfigurationTemplateNonProd
      VersionLabel:
        Ref: BeanstalkDemoVersion
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          Version: '2012-10-17'
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
    - BeanstalkDemo
    - BeanstalkDemoEnvDev
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      # ArtifactStore:
      #   Type: S3
      #   Location:
      #     Fn::Join:
      #     - ''
      #     - - beanstalk-demo-codepipeline-artifactstore
      #       - Ref: AWS::Region
      #       - "-"
      #       - Ref: AWS::AccountId
      # DisableInboundStageTransitions: []
      Name: !Ref 'CodePipelineRole'
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      # #Alternate way of getting the role?
      # RoleArn:
      #   Fn::Join:
      #   - ''
      #   - - 'arn:aws:iam::'
      #     - Ref: AWS::AccountId
      #     - ":role/"
      #     - Ref: CodePipelineRole
      Stages:
        - Name: Source #TODO: have Bitbucket push branches to code commit ?
          Actions:
          - InputArtifacts: []
            Name: Source
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: '1'
              Provider: GitHub
            OutputArtifacts:
            - Name: ApplicationSource
                # Ref: MyInputArtifacts #use input artifacts when this comes from a master artifact
                # see the stelligent samples for how thier master template uses this one.
            Configuration:
              Owner:
                Ref: GithubUser
              Repo:
                Ref: Repo
              Branch:
                Ref: Branch
              OAuthToken:
                Ref: GithubToken
            RunOrder: 1
        - Name: DevelopmentDeployment
          Actions:
          - InputArtifacts:
            - Name: ApplicationSource
            Name: BeanstalkApp
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: ElasticBeanstalk
              Version: '1'
            Configuration:
            Configuration:
              ApplicationName:
                Ref: BeanstalkDemo
              EnvironmentName:
                Ref: BeanstalkDemoEnvDev
            RunOrder: 1
          # - Name: ApproveDevDeployment
          #   ActionTypeId:
          #     Category: Approval
          #     Owner: AWS
          #     Provider: Manual
          #     Version: '1'
          #   Configuration:
          #     NotificationArn: !Ref CodePipelineSNSTopic
          #     CustomData: !Sub 'There is a new deployment ready for your approval.  Approving will release the code into the next Phase of delivery (Production)!'
          #   RunOrder: 2

















  # ElasticBeanstalkServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: elasticbeanstalk.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #
  # BeanstalkDemoConfigurationTemplateProd: #create non-prod template as well with thinner resourcing.
  #   Type: AWS::ElasticBeanstalk::ConfigurationTemplate
  #   Properties:
  #     ApplicationName:
  #       Ref: BeanstalkDemo
  #     Description: Production sized template.
  #     #SolutionStackNames: http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html#concepts.platforms.ruby
  #     SolutionStackName: 64bit Amazon Linux 2016.09 v2.3.1 running Ruby 2.3 (Puma)
  #     OptionSettings:
  #     - OptionName: Availability Zones
  #       ResourceName: AWSEBAutoScalingGroup
  #       Namespace: aws:autoscaling:asg
  #       Value: Any
  #     - OptionName: Cooldown
  #       ResourceName: AWSEBAutoScalingGroup
  #       Namespace: aws:autoscaling:asg
  #       Value: '360'
  #     # - Namespace: aws:autoscaling:launchconfiguration
  #     #   OptionName: EC2KeyName
  #     #   Value:
  #     #     Ref: KeyName
  #     - Namespace: aws:autoscaling:launchconfiguration
  #       OptionName: IamInstanceProfile
  #       Value:
  #         Ref: WebServerInstanceProfile
  #     - OptionName: ImageId
  #       ResourceName: AWSEBAutoScalingLaunchConfiguration
  #       Namespace: aws:autoscaling:launchconfiguration
  #       Value: ami-d6a1ffb0 #TODO: get from mappings
  #     - OptionName: InstanceType
  #       Namespace: aws:autoscaling:launchconfiguration
  #       Value: t2.micro
  #     - OptionName: MonitoringInterval
  #       ResourceName: AWSEBAutoScalingLaunchConfiguration
  #       Namespace: aws:autoscaling:launchconfiguration
  #       Value: 1 minute
  #     - OptionName: RollingUpdateType
  #       ResourceName: AWSEBAutoScalingGroup
  #       Namespace: aws:autoscaling:updatepolicy:rollingupdate
  #       Value: Immutable
  #     - OptionName: Timeout
  #       ResourceName: AWSEBAutoScalingGroup
  #       Namespace: aws:autoscaling:updatepolicy:rollingupdate
  #       Value: PT15M
  #     - OptionName: EnvironmentVariables
  #       Namespace: aws:cloudformation:template:parameter
  #       Value: RACK_ENV=production,RAILS_SKIP_MIGRATIONS=false,RAILS_SKIP_ASSET_COMPILATION=false,BUNDLE_WITHOUT=test:development
  #     - OptionName: InstancePort
  #       Namespace: aws:cloudformation:template:parameter
  #       Value: '80'
  #     - OptionName: RubyVersion
  #       Namespace: aws:cloudformation:template:parameter
  #       Value: 2.3.1
  #     - OptionName: Application Healthcheck URL
  #       Namespace: aws:elasticbeanstalk:application
  #       Value: "/health"
  #     - OptionName: BUNDLE_WITHOUT
  #       Namespace: aws:elasticbeanstalk:application:environment
  #       Value: test:development
  #     - OptionName: DeploymentPolicy
  #       Namespace: aws:elasticbeanstalk:command
  #       Value: Immutable
  #     - OptionName: Timeout
  #       Namespace: aws:elasticbeanstalk:command
  #       Value: '600'
  #     - OptionName: RollbackLaunchOnFailure
  #       Namespace: aws:elasticbeanstalk:control
  #       Value: 'false'
  #     - OptionName: EnvironmentType
  #       Namespace: aws:elasticbeanstalk:environment
  #       Value: LoadBalanced
  #     - OptionName: ConfigDocument
  #       Namespace: aws:elasticbeanstalk:healthreporting:system
  #       Value: '{"Version":1,"CloudWatchMetrics":{"Instance":{"CPUIrq":null,"LoadAverage5min":null,"ApplicationRequests5xx":null,"ApplicationRequests4xx":null,"CPUUser":null,"LoadAverage1min":null,"ApplicationLatencyP50":null,"CPUIdle":null,"InstanceHealth":null,"ApplicationLatencyP95":null,"ApplicationLatencyP85":null,"RootFilesystemUtil":null,"ApplicationLatencyP90":null,"CPUSystem":null,"ApplicationLatencyP75":null,"CPUSoftirq":null,"ApplicationLatencyP10":null,"ApplicationLatencyP99":null,"ApplicationRequestsTotal":null,"ApplicationLatencyP99.9":null,"ApplicationRequests3xx":null,"ApplicationRequests2xx":null,"CPUIowait":null,"CPUNice":null},"Environment":{"InstancesSevere":null,"InstancesDegraded":null,"ApplicationRequests5xx":null,"ApplicationRequests4xx":null,"ApplicationLatencyP50":null,"ApplicationLatencyP95":null,"ApplicationLatencyP85":null,"InstancesUnknown":null,"ApplicationLatencyP90":null,"InstancesInfo":null,"InstancesPending":null,"ApplicationLatencyP75":null,"ApplicationLatencyP10":null,"ApplicationLatencyP99":null,"ApplicationRequestsTotal":null,"InstancesNoData":null,"ApplicationLatencyP99.9":null,"ApplicationRequests3xx":null,"ApplicationRequests2xx":null,"InstancesOk":null,"InstancesWarning":null}}}'
  #     - OptionName: HealthCheckSuccessThreshold
  #       Namespace: aws:elasticbeanstalk:healthreporting:system
  #       Value: Ok
  #     - OptionName: SystemType
  #       Namespace: aws:elasticbeanstalk:healthreporting:system
  #       Value: enhanced
  #     - OptionName: Automatically Terminate Unhealthy Instances
  #       Namespace: aws:elasticbeanstalk:monitoring
  #       Value: 'true'
  #
  # TODO: create SGs elsewhere in CF templates?
  # - OptionName: SecurityGroups
  #   ResourceName: AWSEBAutoScalingLaunchConfiguration
  #   Namespace: aws:autoscaling:launchconfiguration
  #   Value: awseb-e-3f8m43t9em-stack-AWSEBSecurityGroup-13800Q4IZX5VL


#   BeanstalkDemoEnvProd: #create dev/test envs that use the non-prod configuration.
#     Type: AWS::ElasticBeanstalk::Environment
#     Properties:
#       Description: Production environment running ruby sinatra application.
#       ApplicationName:
#         Ref: BeanstalkDemo
#       TemplateName:
#         Ref: BeanstalkDemoConfigurationTemplateProd #TODO copy from exported prod config.
#       VersionLabel:
#         Ref: BeanstalkDemoVersion
# Pipeline configuration:
#   # ArtifactStoreBucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       VersioningConfiguration:
#         Status: Enabled
#   # CfnRole:
#       Type: AWS::IAM::Role
#       Properties:
#         AssumeRolePolicyDocument:
#           Statement:
#           - Action: ['sts:AssumeRole']
#             Effect: Allow
#             Principal:
#               Service: [cloudformation.amazonaws.com]
#           Version: '2012-10-17'
#         Path: /
#         Policies:
#           - PolicyName: CloudFormationRole
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement:
#                 - Action:
#                     - 'elasticbeanstalk:*'
#                     - 'ec2:*'
#                     - 'ecs:*'
#                     - 'ecr:*'
#                     - 'elasticloadbalancing:*'
#                     - 'autoscaling:*'
#                     - 'cloudwatch:*'
#                     - 's3:*'
#                     - 'sns:*'
#                     - 'cloudformation:*'
#                     - 'dynamodb:*'
#                     - 'rds:*'
#                     - 'sqs:*'
#                     - 'iam:GetPolicyVersion'
#                     - 'iam:GetRole'
#                     - 'iam:PassRole'
#                     - 'iam:ListRolePolicies'
#                     - 'iam:ListAttachedRolePolicies'
#                     - 'iam:ListInstanceProfiles'
#                     - 'iam:ListRoles'
#                     - 'iam:ListServerCertificates'
#                     - 'acm:DescribeCertificate'
#                     - 'acm:ListCertificates'
#                     - 'codebuild:BatchGetBuilds'
#                     - 'codebuild:StartBuild'
#                   Effect: Allow
#                   Resource: '*'
#                   #may need more policies: http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html
#   # PipelineRole:
#   #   Type: AWS::IAM::Role
#   #   Properties:
#   #     AssumeRolePolicyDocument:
#   #       Statement:
#   #       - Action: ['sts:AssumeRole']
#   #         Effect: Allow
#   #         Principal:
#   #           Service: [codepipeline.amazonaws.com]
#   #       Version: '2012-10-17'
#   #     Path: /
#   #     Policies:
#   #       - PolicyName: CodePipelineAccess
#   #         PolicyDocument:
#   #           Version: '2012-10-17'
#   #           Statement:
#   #             - Action:
#   #               - 's3:*'
#   #               - 'cloudformation:CreateStack'
#   #               - 'cloudformation:DescribeStacks'
#   #               - 'cloudformation:DeleteStack'
#   #               - 'cloudformation:UpdateStack'
#   #               - 'cloudformation:CreateChangeSet'
#   #               - 'cloudformation:ExecuteChangeSet'
#   #               - 'cloudformation:DeleteChangeSet'
#   #               - 'cloudformation:DescribeChangeSet'
#   #               - 'cloudformation:SetStackPolicy'
#   #               - 'iam:PassRole'
#   #               - 'sns:Publish'
#   #               Effect: Allow
#   #               Resource: '*'
#   # # CodePipelineSNSTopic:
#   #   Type: AWS::SNS::Topic
#   #   Properties:
#   #     Subscription:
#   #       - Endpoint: !Ref Email
#   #         Protocol: email
#   #

Outputs:
  DevURL:
    Description: URL of the beanstalk demo instance
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - BeanstalkDemoEnvDev
          - EndpointURL
  # ProdURL:
  #   Description: URL of the AWS Elastic Beanstalk Environment
  #   Value:
  #     Fn::Join:
  #     - ''
  #     - - http://
  #       - Fn::GetAtt:
  #         - BeanstalkDemoEnvProd
  #         - EndpointURL
