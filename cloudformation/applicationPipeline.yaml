AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This is the only template you should be uploading manually.
  Main application pipeline for the BeanstalkDemo application.
  Uploading this pipeline with required parameters will build your pipeline and entire application.
Parameters:
  PipelineName:
    Description: A name for the pipeline
    Type: String
    Default: BeanstalkDemo
  GithubUser:
    Description: Github account where the source files exist for this Application
    Type: String
  GithubToken:
    Description: Secret. Token used for access to the account specified.
    NoEcho: true
    Type: String
    ConstraintDescription: may be a personal access token.
  Repo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
    Default: aws-elasticbeanstalk-demo
  Branch:
    Type: String
    Description: Branch to use from Repo. Only the Name. not the URL
    Default: master
  #TODO: flesh out test and prod params.
  # TestStackName:
  #   Default: Test-Vpc
  #   Description: A name for the test VPC stack
  #   Type: String
  # TestStackConfig:
  #   Default: templates/infrastructure/test-vpc-configuration.json
  #   Description: The configuration file name for the test vpc stack
  #   Type: String
  #   ConstraintDescription: relative path within the source repository "Repo".
  # ProdStackName:
  #   Default: Prod-Vpc
  #   Description: A name for the production VPC stack
  #   Type: String
  # ProdStackConfig:
  #   Default: templates/infrastructure/prod-vpc-configuration.json
  #   Description: The configuration file name for the production VPC stack
  #   Type: String
  #   ConstraintDescription: relative path within the source repository "Repo".
  # ChangeSetName:
  #   Default: UpdatePreview-BeanstalkDemo
  #   Description: A name for the production changeset.
  #   Type: String
  # Email:
  #   Description: The email address where CodePipeline sends pipeline notifications
  #   Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - PipelineName
          - GithubUser
          - GithubToken
          - Repo
          - Branch
          - Email
# Mappings: none yet!
Resources:
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  WebServerRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebServerRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          NotAction: iam:*
          Resource: "*"
      Roles:
      - Ref: WebServerRole
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: WebServerRole
  BeanstalkDemo:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample Ruby Sinatra Application
  BeanstalkDemoVersion: #TODO: this must be created from the codepipeline and passed in.
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      Description: AWS Elastic Beanstalk Demo App Version
      ApplicationName:
        Ref: BeanstalkDemo
      SourceBundle:
        S3Bucket:
          Fn::Join: #TODO: inject this from codepipeline?
          - "-"
          - - dev-brettswift-beanstalk-demo
            - Ref: AWS::Region
        S3Key: BeanstalkDemo.zip #TODO: inject this from codepipeline
  BeanstalkDemoConfigurationTemplateNonProd: #create non-prod template as well with thinner resourcing.
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: BeanstalkDemo
      Description: Non Production sized template
      #SolutionStackNames: http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html#concepts.platforms.ruby
      SolutionStackName: 64bit Amazon Linux 2016.09 v2.3.1 running Ruby 2.3 (Puma)
      OptionSettings:
      - OptionName: EnvironmentType
        Namespace: aws:elasticbeanstalk:environment
        Value: SingleInstance
  BeanstalkDemoConfigurationTemplateProd: #create non-prod template as well with thinner resourcing.
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: BeanstalkDemo
      Description: Production sized template.
      SolutionStackName: 64bit Amazon Linux 2016.09 v2.3.1 running Ruby 2.3 (Puma)
      OptionSettings:
      - OptionName: Availability Zones
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:asg
        Value: Any
      - OptionName: EnvironmentType
        Namespace: aws:elasticbeanstalk:environment
        Value: LoadBalanced
      - OptionName: Cooldown
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:asg
        Value: '360'
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value:
          Ref: WebServerInstanceProfile
      - OptionName: MeasureName
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:trigger
        Value: CPUUtilization
      - OptionName: Unit
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:trigger
        Value: Percent
      - OptionName: LowerThreshold
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:trigger
        Value: 20
      - OptionName: Period
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:trigger
        Value: 5
      - OptionName: UpperBreachScaleIncrement
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:trigger
        Value: 1
      - OptionName: UpperThreshold
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:trigger
        Value: 60
      - OptionName: MinSize
        Namespace: aws:autoscaling:asg
        Value: '2'
      - OptionName: MaxSize
        Namespace: aws:autoscaling:asg
        Value: '5'
      - OptionName: InstanceType
        Namespace: aws:autoscaling:launchconfiguration
        # Valid values from: aws elasticbeanstalk describe-configuration-options. t2 isn't there but it works?!
        Value: t2.micro #TODO: expose via params just for param grouping.
      ############################################################
      # #These options are required together.  Must create and assign the service role as well.
      # https://forums.aws.amazon.com/thread.jspa?threadID=212981
      # - OptionName: ServiceRole
      #   Namespace: aws:elasticbeanstalk:application:environment
      #   Value: aws-elasticbeanstalk-service-role
      # - OptionName: DeploymentPolicy
      #   Namespace: aws:elasticbeanstalk:command
      #   Value: 'Immutable' #if immutable so must be RollingUpdateType
      # - OptionName: MonitoringInterval
      #   ResourceName: AWSEBAutoScalingLaunchConfiguration
      #   Namespace: aws:autoscaling:launchconfiguration
      #   Value: 1 minute
      # - OptionName: SystemType
      #   Namespace: aws:elasticbeanstalk:healthreporting:system
      #   Value: enhanced
      ############################################################
      - OptionName: RollingUpdateEnabled
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:updatepolicy:rollingupdate
        Value: true
      - OptionName: RollingUpdateType
        Namespace: aws:autoscaling:updatepolicy:rollingupdate
        Value: 'Health' #if immutable so must be DeploymentPolicy
      - OptionName: Timeout
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:updatepolicy:rollingupdate
        Value: PT15M
      - OptionName: MinInstancesInService
        ResourceName: AWSEBAutoScalingGroup
        Namespace: aws:autoscaling:updatepolicy:rollingupdate
        Value: 1
      - OptionName: EnvironmentVariables
        Namespace: aws:cloudformation:template:parameter
        Value: RACK_ENV=production,RAILS_SKIP_MIGRATIONS=false,RAILS_SKIP_ASSET_COMPILATION=false,BUNDLE_WITHOUT=test:development
      - OptionName: InstancePort
        Namespace: aws:cloudformation:template:parameter
        Value: '80' #TODO: move port to 8080, test in one update.
      - OptionName: RubyVersion
        Namespace: aws:cloudformation:template:parameter
        Value: 2.3.1
      - OptionName: Application Healthcheck URL
        Namespace: aws:elasticbeanstalk:application
        Value: "/health"
      - OptionName: BUNDLE_WITHOUT
        Namespace: aws:elasticbeanstalk:application:environment
        Value: test:development
      - OptionName: Timeout
        Namespace: aws:elasticbeanstalk:command
        Value: '600'
      - OptionName: RollbackLaunchOnFailure
        Namespace: aws:elasticbeanstalk:control
        Value: true
      - OptionName: ConfigDocument
        Namespace: aws:elasticbeanstalk:healthreporting:system
        Value: '{"Version":1,"CloudWatchMetrics":{"Instance":{"CPUIrq":null,"LoadAverage5min":null,"ApplicationRequests5xx":null,"ApplicationRequests4xx":null,"CPUUser":null,"LoadAverage1min":null,"ApplicationLatencyP50":null,"CPUIdle":null,"InstanceHealth":null,"ApplicationLatencyP95":null,"ApplicationLatencyP85":null,"RootFilesystemUtil":null,"ApplicationLatencyP90":null,"CPUSystem":null,"ApplicationLatencyP75":null,"CPUSoftirq":null,"ApplicationLatencyP10":null,"ApplicationLatencyP99":null,"ApplicationRequestsTotal":null,"ApplicationLatencyP99.9":null,"ApplicationRequests3xx":null,"ApplicationRequests2xx":null,"CPUIowait":null,"CPUNice":null},"Environment":{"InstancesSevere":null,"InstancesDegraded":null,"ApplicationRequests5xx":null,"ApplicationRequests4xx":null,"ApplicationLatencyP50":null,"ApplicationLatencyP95":null,"ApplicationLatencyP85":null,"InstancesUnknown":null,"ApplicationLatencyP90":null,"InstancesInfo":null,"InstancesPending":null,"ApplicationLatencyP75":null,"ApplicationLatencyP10":null,"ApplicationLatencyP99":null,"ApplicationRequestsTotal":null,"InstancesNoData":null,"ApplicationLatencyP99.9":null,"ApplicationRequests3xx":null,"ApplicationRequests2xx":null,"InstancesOk":null,"InstancesWarning":null}}}'
      - OptionName: HealthCheckSuccessThreshold
        Namespace: aws:elasticbeanstalk:healthreporting:system
        Value: Ok
      - OptionName: Automatically Terminate Unhealthy Instances
        Namespace: aws:elasticbeanstalk:monitoring
        Value: true #TODO: chaos monkey!
  BeanstalkDemoEnvDev: #create dev/test envs that use the non-prod configuration.
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn:
    - BeanstalkDemo
    - BeanstalkDemoConfigurationTemplateNonProd
    - BeanstalkDemoVersion
    Properties:
      Description: Development demo environment running sample ruby sinatra application.
      EnvironmentName: Development
      ApplicationName:
        Ref: BeanstalkDemo
      Description: AWS ElasticBeanstalk Dev Ruby Environment
      TemplateName:
        Ref: BeanstalkDemoConfigurationTemplateNonProd
      VersionLabel:
        Ref: BeanstalkDemoVersion
  BeanstalkDemoEnvPerf: #create dev/test envs that use the non-prod configuration.
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn:
    - BeanstalkDemo
    - BeanstalkDemoConfigurationTemplateProd
    - BeanstalkDemoVersion
    - BeanstalkDemoEnvDev
    Properties:
      Description: Scaled using the production sizing.
      EnvironmentName: PerformanceTesting
      ApplicationName:
        Ref: BeanstalkDemo
      Description: AWS ElasticBeanstalk Dev Ruby Environment
      TemplateName:
        Ref: BeanstalkDemoConfigurationTemplateProd
      VersionLabel:
        Ref: BeanstalkDemoVersion
      # OptionSettings:
      # - OptionName: VPCId #TODO: inject VPC and subnets.
      #   Namespace: aws:ec2:vpc
      #   Value: !Ref: FromParams
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          Version: '2012-10-17'
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
    - BeanstalkDemo
    - BeanstalkDemoEnvDev
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      Name: !Ref 'CodePipelineRole'
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      # #Alternate way of getting the role?
      # RoleArn:
      #   Fn::Join:
      #   - ''
      #   - - 'arn:aws:iam::'
      #     - Ref: AWS::AccountId
      #     - ":role/"
      #     - Ref: CodePipelineRole
      Stages:
        - Name: Source #TODO: have Bitbucket push branches to code commit ?
          Actions:
          - InputArtifacts: []
            Name: Source
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: '1'
              Provider: GitHub
            OutputArtifacts:
            - Name: ApplicationSource
                # Ref: MyInputArtifacts #use input artifacts when this comes from a master artifact
                # see the stelligent samples for how thier master template uses this one.
            Configuration:
              Owner:
                Ref: GithubUser
              Repo:
                Ref: Repo
              Branch:
                Ref: Branch
              OAuthToken:
                Ref: GithubToken
            RunOrder: 1
        - Name: DevelopmentDeployment
          Actions:
          - InputArtifacts:
            - Name: ApplicationSource
            Name: BeanstalkApp
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: ElasticBeanstalk
              Version: '1'
            Configuration:
            Configuration:
              ApplicationName:
                Ref: BeanstalkDemo
              EnvironmentName:
                Ref: BeanstalkDemoEnvDev
            RunOrder: 1
          - Name: ApproveDevEnvironment
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Provider: Manual
              Version: '1'
            RunOrder: 2
            # Configuration:
            #   NotificationArn: !Ref CodePipelineSNSTopic
            #   CustomData: !Sub 'There is a new deployment ready for your approval.  Approving will release the code into the next Phase of delivery (Production)!'
        - Name: PerformanceTesting
          Actions:
          - InputArtifacts:
            - Name: ApplicationSource
            Name: BeanstalkApp
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: ElasticBeanstalk
              Version: '1'
            Configuration:
            Configuration:
              ApplicationName:
                Ref: BeanstalkDemo
              EnvironmentName:
                Ref: BeanstalkDemoEnvPerf
            RunOrder: 1

  # TODO: create SGs elsewhere in CF templates?
  # - OptionName: SecurityGroups
  #   ResourceName: AWSEBAutoScalingLaunchConfiguration
  #   Namespace: aws:autoscaling:launchconfiguration
  #   Value: awseb-e-3f8m43t9em-stack-AWSEBSecurityGroup-13800Q4IZX5VL
Outputs:
  DevURL:
    Description: URL of the beanstalk demo instance
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - BeanstalkDemoEnvDev
          - EndpointURL
  PerformanceURL:
    Description: URL of the AWS Elastic Beanstalk Environment
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - BeanstalkDemoEnvPerf
          - EndpointURL
