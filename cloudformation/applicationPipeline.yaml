AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This is the only template you should be uploading manually.
  Main application pipeline for the BeanstalkDemo application.
  Uploading this pipeline with required parameters will build your pipeline and entire application.
Parameters:
  PipelineName:
    Description: A name for the pipeline
    Type: String
    Default: BeanstalkDemo
  GithubUser:
    Description: Github account where the source files exist for this Application
    Type: String
  GithubToken:
    Description: Secret. Token used for access to the account specified.
    NoEcho: true
    Type: String
    ConstraintDescription: may be a personal access token.
  Repo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
    Default: aws-elasticbeanstalk-demo
  Branch:
    Type: String
    Description: Branch to use from Repo. Only the Name. not the URL
    Default: master
  TemplateFileName:
    Default: cloudformation/beanstalkDemoTemplate.yaml
    Description: The file name of the application template
    Type: String
    ConstraintDescription: relative path within the source repository "Repo".
  #TODO: flesh out test and prod params.
  # TestStackName:
  #   Default: Test-Vpc
  #   Description: A name for the test VPC stack
  #   Type: String
  # TestStackConfig:
  #   Default: templates/infrastructure/test-vpc-configuration.json
  #   Description: The configuration file name for the test vpc stack
  #   Type: String
  #   ConstraintDescription: relative path within the source repository "Repo".
  # ProdStackName:
  #   Default: Prod-Vpc
  #   Description: A name for the production VPC stack
  #   Type: String
  # ProdStackConfig:
  #   Default: templates/infrastructure/prod-vpc-configuration.json
  #   Description: The configuration file name for the production VPC stack
  #   Type: String
  #   ConstraintDescription: relative path within the source repository "Repo".
  ChangeSetName:
    Default: UpdatePreview-BeanstalkDemo
    Description: A name for the production changeset.
    Type: String
  # Email:
  #   Description: The email address where CodePipeline sends pipeline notifications
  #   Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - PipelineName
          - GithubUser
          - GithubToken
          - Repo
          - Branch
          - Email
      - Label:
          default: "Stack Config File (vpc.yaml)"
        Parameters:
          - TemplateFileName
      # - Label:
      #     default: "Test Stack Settings"
      #   Parameters:
      #     - TestStackName
      #     - TestStackConfig
      # - Label:
      #     default: "Production Stack Settings"
      #   Parameters:
      #     - ChangeSetName
      #     - ProdStackName
      #     - ProdStackConfig
Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CfnRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
          Version: '2012-10-17'
        Path: /
        Policies:
          - PolicyName: CloudFormationRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - 'elasticbeanstalk:*'
                    - 'ec2:*'
                    - 'ecs:*'
                    - 'ecr:*'
                    - 'elasticloadbalancing:*'
                    - 'autoscaling:*'
                    - 'cloudwatch:*'
                    - 's3:*'
                    - 'sns:*'
                    - 'cloudformation:*'
                    - 'dynamodb:*'
                    - 'rds:*'
                    - 'sqs:*'
                    - 'iam:GetPolicyVersion'
                    - 'iam:GetRole'
                    - 'iam:PassRole'
                    - 'iam:ListRolePolicies'
                    - 'iam:ListAttachedRolePolicies'
                    - 'iam:ListInstanceProfiles'
                    - 'iam:ListRoles'
                    - 'iam:ListServerCertificates'
                    - 'acm:DescribeCertificate'
                    - 'acm:ListCertificates'
                    - 'codebuild:BatchGetBuilds'
                    - 'codebuild:StartBuild'
                  Effect: Allow
                  Resource: '*'
                  #may need more policies: http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                Effect: Allow
                Resource: '*'
  # CodePipelineSNSTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #       - Endpoint: !Ref Email
  #         Protocol: email
  #
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      DisableInboundStageTransitions: []
      Name: !Ref 'PipelineName'
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        - Name: Source #TODO: have Bitbucket push branches to code commit ?
          Actions:
          - InputArtifacts: []
            Name: Source
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: '1'
              Provider: GitHub
            OutputArtifacts:
            - Name: TemplateSource
                # Ref: MyInputArtifacts #use input artifacts when this comes from a master artifact
                # see the stelligent samples for how thier master template uses this one.
            Configuration:
              Owner:
                Ref: GithubUser
              Repo:
                Ref: Repo
              Branch:
                Ref: Branch
              OAuthToken:
                Ref: GithubToken
            RunOrder: 1
        - Name: TestStage
          Actions:
            - Name: DeployDevelopmentVersion
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !GetAtt [CfnRole, Arn]
                StackName: !Ref TestStackName
                TemplateConfiguration: !Sub "TemplateSource::${TestStackConfig}"
                TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
              RunOrder: 1
            - Name: ApproveTestStack
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'Do you want to create a change set against the production stack and delete the ${TestStackName} stack?'
              RunOrder: 2
            - Name: DeleteTestStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: DELETE_ONLY
                RoleArn: !GetAtt [CfnRole, Arn]
                StackName: !Ref TestStackName
              RunOrder: 3
        - Name: ProdStage
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt [CfnRole, Arn]
                StackName: !Ref ProdStackName
                ChangeSetName: !Ref ChangeSetName
                TemplateConfiguration: !Sub "TemplateSource::${ProdStackConfig}"
                TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
              RunOrder: 1
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'A new change set was created for the ${ProdStackName} stack. Do you want to implement the changes?'
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref ChangeSetName
                RoleArn: !GetAtt [CfnRole, Arn]
                StackName: !Ref ProdStackName
              RunOrder: 3
